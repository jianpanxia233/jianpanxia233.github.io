<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jianpanxia-Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-08-31T07:28:59.840Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Janpanxia</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>手动实现简单的promise</title>
    <link href="http://yoursite.com/2020/08/31/%E6%89%8B%E5%8A%A8%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84promise/"/>
    <id>http://yoursite.com/2020/08/31/%E6%89%8B%E5%8A%A8%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84promise/</id>
    <published>2020-08-31T06:19:43.000Z</published>
    <updated>2020-08-31T07:28:59.840Z</updated>
    
    <content type="html"><![CDATA[<h2 id="promise构造函数"><a href="#promise构造函数" class="headerlink" title="promise构造函数"></a>promise构造函数</h2><p>规范没有指明如何书写构造函数，那就参考ES6的构造方式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const promise = new Promise(<span class="keyword">function</span>(resolve, reject) &#123;</span><br><span class="line">  // ... some code</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (/* 异步操作成功 */)&#123;</span><br><span class="line">    resolve(value);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Promise 构造函数接受一个函数作为参数，该函数的两个参数分别是 resolve 和 reject</p><p>resolve 函数的作用是将 Promise 对象的状态从 pending 变为 fulfilled ，在异步操作成功时调用，并将异步操作的结果，作为参数传递给注册在 then 方法上的回调函数（then方法的第一个参数）； reject 函数的作用是将 Promise 对象的状态从 pending 变为 rejected ，在异步操作失败时调用，并将异步操作报出的错误，作为参数传递给注册在 then 方法上的回调函数（then方法的第二个参数）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> promise(fn) &#123;</span><br><span class="line">    <span class="built_in">let</span> that = this</span><br><span class="line">    that.status = <span class="string">'pending'</span>  //存储promise的state</span><br><span class="line">    this.value = <span class="string">''</span>          //存储promise的value</span><br><span class="line">    this.reason = <span class="string">''</span>         //存储promise的reason</span><br><span class="line">    that.onFulfilledCb = [] // 存储<span class="keyword">then</span>方法中注册的回调函数（第一个参数）</span><br><span class="line">    that.onRejectedCb = [] // 存储<span class="keyword">then</span>方法中注册的回调函数（第二个参数）</span><br><span class="line">    <span class="keyword">function</span> resolve(value) &#123;</span><br><span class="line">        // 将promise的状态从pending更改为fulfilled，并且以value为参数依次调用<span class="keyword">then</span>方法中注册的回调</span><br><span class="line">        setTimeout(()=&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span>(that.status === <span class="string">'pending'</span>) &#123;</span><br><span class="line">                that.status = <span class="string">'fulfilled'</span></span><br><span class="line">                that.value = value</span><br><span class="line">                that.onFulfilledCb.map( item =&gt; &#123;</span><br><span class="line">                    item(that.value)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, 0)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> reject(reason) &#123;</span><br><span class="line">        // 将promise的状态从pending更改为rejected，并且以reason为参数依次调用<span class="keyword">then</span>方法中注册的回调</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (that.status === <span class="string">'pending'</span>) &#123;</span><br><span class="line">            that.status = <span class="string">'rejected'</span></span><br><span class="line">            that.reason = reason</span><br><span class="line">            // 2.2.3、2.2.6</span><br><span class="line">            that.onRejectedCb.map( item =&gt; &#123;</span><br><span class="line">            item(that.reason)</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, 0)</span><br><span class="line">    &#125;</span><br><span class="line">    fn(resolve, reject)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="then方法"><a href="#then方法" class="headerlink" title="then方法"></a>then方法</h2><p>promise 实例具有 then 方法，也就是说，then方法是定义在原型对象 promise.prototype 上的。它的作用是为 promise 实例添加状态改变时的回调函数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">promise.prototype.then = <span class="keyword">function</span> (onFulfilled, onRejected) &#123;</span><br><span class="line">  <span class="built_in">let</span> that = this</span><br><span class="line">  <span class="built_in">let</span> promise2  </span><br><span class="line"></span><br><span class="line">  // 2.2.1、2.2.5</span><br><span class="line">  onFulfilled = typeof onFulfilled === <span class="string">'function'</span> ? onFulfilled : v =&gt; v</span><br><span class="line">  onRejected = typeof onRejected === <span class="string">'function'</span> ? onRejected : r =&gt; r</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (that.status === <span class="string">'pending'</span>) &#123;</span><br><span class="line">    // 2.2.7</span><br><span class="line">    <span class="built_in">return</span> promise2 = new promise((resolve, reject) =&gt; &#123;</span><br><span class="line">      that.onFulfilledCb.push(value =&gt; &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">          <span class="built_in">let</span> x = onFulfilled(value)</span><br><span class="line">        &#125; catch(e) &#123;</span><br><span class="line">          // 2.2.7.2</span><br><span class="line">          reject(e)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      that.onRejectedCb.push(reason =&gt; &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">          <span class="built_in">let</span> x = onRejected(reason)</span><br><span class="line">        &#125; catch(e) &#123;</span><br><span class="line">          // 2.2.7.2</span><br><span class="line">          reject(e)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现一个同步版的promise"><a href="#实现一个同步版的promise" class="headerlink" title="实现一个同步版的promise"></a>实现一个同步版的promise</h2><p>先按照规范，定几个标记量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">const PENDING = <span class="string">"pending"</span></span><br><span class="line">const FULFILLED = <span class="string">"fulfilled"</span></span><br><span class="line">const REJECTED = <span class="string">"rejected"</span></span><br><span class="line"><span class="keyword">function</span> Promise(fn)&#123;</span><br><span class="line">    <span class="built_in">let</span> that = this</span><br><span class="line">    this.status = PENDING</span><br><span class="line">    this.value = undefined</span><br><span class="line">    this.reason = undefined</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">let</span> resolve = <span class="keyword">function</span>(value)&#123;</span><br><span class="line">        that.value = value</span><br><span class="line">        that.status = FULFILLED</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">let</span> reject = <span class="keyword">function</span>(reason)&#123;</span><br><span class="line">        that.reason = reason</span><br><span class="line">        that.status = REJECTED</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    try&#123;</span><br><span class="line">        fn(resolve,reject)</span><br><span class="line">    &#125;catch(e)&#123;</span><br><span class="line">        reject(e)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Promise.prototype.then = <span class="keyword">function</span>(onFulfilled,onRejected)&#123;</span><br><span class="line">    <span class="keyword">if</span>(this.status === FULFILLED)&#123;</span><br><span class="line">        onFulfilled(this.value)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(this.status === REJECTED)&#123;</span><br><span class="line">        onRejected(this.reason)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现异步"><a href="#实现异步" class="headerlink" title="实现异步"></a>实现异步</h2><h3 id="1-同步版本在执行异步代码时什么都没有返回"><a href="#1-同步版本在执行异步代码时什么都没有返回" class="headerlink" title="1.同步版本在执行异步代码时什么都没有返回"></a>1.同步版本在执行异步代码时什么都没有返回</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">new Promise((resolve,reject)=&gt;&#123;</span><br><span class="line">    setTimeout(()=&gt;&#123;resolve(1)&#125;)</span><br><span class="line">&#125;).<span class="keyword">then</span>(x=&gt;console.log(x))</span><br></pre></td></tr></table></figure><p>这是因为在执行then时，resolve还没有执行，status还是PENDING的状态</p><h3 id="2-如果then中的参数不是Function时的应该有一个默认的回调函数"><a href="#2-如果then中的参数不是Function时的应该有一个默认的回调函数" class="headerlink" title="2.如果then中的参数不是Function时的应该有一个默认的回调函数"></a>2.如果then中的参数不是Function时的应该有一个默认的回调函数</h3><p>因此如果执行到then时，需要如下操作：<br>先判断 onFulfilled与onRejected是否是函数<br>然后判断status的状态，如果status还是PENDING的话可以先将then中的两个回调函数存起来，待到执行resolve或者reject时再执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> Promise(fn)&#123;</span><br><span class="line">    <span class="built_in">let</span> that = this</span><br><span class="line">    this.status = PENDING</span><br><span class="line">    this.value = undefined</span><br><span class="line">    this.reason = undefined</span><br><span class="line">    this.resolvedCb = []</span><br><span class="line">    this.rejectedCb = []</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">let</span> resolve = <span class="keyword">function</span>(value)&#123;</span><br><span class="line">        that.value = value</span><br><span class="line">        that.status = FULFILLED</span><br><span class="line">        that.resolvedCb.forEach(cb=&gt;cb(that.value))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">let</span> reject = <span class="keyword">function</span>(reason)&#123;</span><br><span class="line">        that.reason = reason</span><br><span class="line">        that.status = REJECTED</span><br><span class="line">        that.rejectedCb.forEach(cb=&gt;cb(that.reason))</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    try&#123;</span><br><span class="line">        fn(resolve,reject)</span><br><span class="line">    &#125;catch(e)&#123;</span><br><span class="line">        reject(e)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Promise.prototype.then = <span class="keyword">function</span>(onFulfilled,onRejected)&#123;</span><br><span class="line">    onFulfilled = onFulfilled instanceof Function?onFulfilled:()=&gt;&#123;&#125;</span><br><span class="line">    onRejected = onRejected instanceof Function?onRejected:()=&gt;&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(this.status === FULFILLED)&#123;</span><br><span class="line">        onFulfilled(this.value)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(this.status === REJECTED)&#123;</span><br><span class="line">        onRejected(this.reason)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(this.status === PENDING)&#123;</span><br><span class="line">        this.resolvedCb.push(onFulfilled)</span><br><span class="line">        this.rejectedCb.push(onRejected)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="promise部分API实现"><a href="#promise部分API实现" class="headerlink" title="promise部分API实现"></a>promise部分API实现</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">//Promise.resolve</span><br><span class="line">Promise.resolve = <span class="keyword">function</span>(value)&#123;</span><br><span class="line">    <span class="built_in">return</span> new Promise(resolve=&gt;&#123;</span><br><span class="line">        resolve(value)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">//Promise.reject</span><br><span class="line">Promise.reject = <span class="keyword">function</span>(reason)&#123;</span><br><span class="line">    <span class="built_in">return</span> new Promise((resolve,reject)=&gt;&#123;</span><br><span class="line">        reject(reason)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">//Promise.all</span><br><span class="line">Promise.all = <span class="keyword">function</span> (promises) &#123;</span><br><span class="line">    <span class="built_in">let</span> resolveList = []</span><br><span class="line">    <span class="built_in">return</span> new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span>(promises.length === 0)&#123; //promises为空数组的情况下，会返回resolve([])</span><br><span class="line">            resolve(resolveList)</span><br><span class="line">        &#125;</span><br><span class="line">        promises.forEach(p =&gt; &#123;</span><br><span class="line">            Promise.resolve(p).<span class="keyword">then</span>(re =&gt; &#123;</span><br><span class="line">                resolveList.push(re)</span><br><span class="line">                <span class="keyword">if</span> (promises.length === resolveList.length) &#123;</span><br><span class="line">                    //因为promise异步的原因，还是得放里面</span><br><span class="line">                    resolve(resolveList)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, rj =&gt; &#123;</span><br><span class="line">                reject(rj)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">//Promise.race</span><br><span class="line">Promise.race = <span class="keyword">function</span> (promises) &#123;</span><br><span class="line">    <span class="built_in">let</span> flag = <span class="literal">true</span></span><br><span class="line">    <span class="built_in">return</span> new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        promises.forEach(p =&gt; &#123;</span><br><span class="line">            Promise.resolve(p).<span class="keyword">then</span>(re =&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                    flag = <span class="literal">false</span></span><br><span class="line">                    resolve(re);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, rj =&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                    flag = <span class="literal">false</span></span><br><span class="line">                    reject(rj);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;promise构造函数&quot;&gt;&lt;a href=&quot;#promise构造函数&quot; class=&quot;headerlink&quot; title=&quot;promise构造函数&quot;&gt;&lt;/a&gt;promise构造函数&lt;/h2&gt;&lt;p&gt;规范没有指明如何书写构造函数，那就参考ES6的构造方式：&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/categories/js/"/>
    
    
      <category term="异步" scheme="http://yoursite.com/tags/%E5%BC%82%E6%AD%A5/"/>
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="Promise" scheme="http://yoursite.com/tags/Promise/"/>
    
  </entry>
  
  <entry>
    <title>js继承</title>
    <link href="http://yoursite.com/2020/08/29/js%E7%BB%A7%E6%89%BF/"/>
    <id>http://yoursite.com/2020/08/29/js%E7%BB%A7%E6%89%BF/</id>
    <published>2020-08-29T12:52:52.000Z</published>
    <updated>2020-08-29T14:17:16.163Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JS继承的六种方式"><a href="#JS继承的六种方式" class="headerlink" title="JS继承的六种方式"></a>JS继承的六种方式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> Person(name)&#123; //给构造函数添加参数</span><br><span class="line">    this.name = name;</span><br><span class="line">    this.sum = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        alert(this.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.age = 10; //给构造函数添加了原型属性</span><br></pre></td></tr></table></figure><p>一、原型链继承</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">Per</span></span>()&#123;</span><br><span class="line">    this.name = <span class="string">"ker"</span></span><br><span class="line">&#125;</span><br><span class="line">Per.prototype = new Person(); //主要</span><br><span class="line">var per1 = new Per();</span><br><span class="line">console.log(per1.age); //10</span><br><span class="line">//instanceof 判断元素是否存在另一个元素的原型链上</span><br><span class="line">//per1 继承了Person的属性，返回<span class="literal">true</span></span><br><span class="line">console.log(per1 instanceof Person); //<span class="literal">true</span></span><br><span class="line">    重点：让新实例的原型等于父类的实例。</span><br><span class="line">　　特点：1、实例可继承的属性有：实例的构造函数的属性，父类构造函数属性，父类原型的属性。（新实例不会继承父类实例的属性！）</span><br><span class="line">　　缺点：1、新实例无法向父类构造函数传参。</span><br><span class="line">　　　　　2、继承单一。</span><br><span class="line">　　　　　3、所有新实例都会共享父类实例的属性。（原型上的属性是共享的，一个实例修改了原型属性，另一个实例的原型属性也会被修改！）</span><br></pre></td></tr></table></figure><p>二、借用构造函数继承</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//借用构造函数继承</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">Con</span></span>()&#123;</span><br><span class="line">    Person.call(this,<span class="string">"jer"</span>);//重点</span><br><span class="line">    this.age = 12;</span><br><span class="line">&#125;</span><br><span class="line">var con1 = new Con();</span><br><span class="line">console.log(con1.name); //<span class="string">"jer"</span></span><br><span class="line">console.log(con1.age);  //12</span><br><span class="line">console.log(con1 instanceof Person); //<span class="literal">false</span></span><br><span class="line">重点：用.call()和.apply()将父类构造函数引入子类函数（在子类函数中做了父类函数的自执行（复制））</span><br><span class="line">特点：1、只继承了父类构造函数的属性，没有继承父类原型的属性。</span><br><span class="line">    　2、解决了原型链继承缺点1、2、3。</span><br><span class="line">　　　3、可以继承多个构造函数属性（call多个）。</span><br><span class="line">　　　4、在子实例中可向父实例传参。</span><br><span class="line">缺点：1、只能继承父类构造函数的属性。</span><br><span class="line">    　2、无法实现构造函数的复用。（每次用每次都要重新调用）</span><br><span class="line">    　3、每个新实例都有父类构造函数的副本，臃肿。</span><br></pre></td></tr></table></figure><p>三、组合继承（组合原型链继承和借用构造函数继承）（常用）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> SubType(name)&#123;</span><br><span class="line">    Person.call(this,name); //借用构造函数模式</span><br><span class="line">&#125;</span><br><span class="line">SubType.prototype = new Person(); //原型链继承</span><br><span class="line">var sub = new SubType(<span class="string">"gar"</span>);</span><br><span class="line">console.log(sub.name);</span><br><span class="line">console.log(sub.age);</span><br><span class="line">重点：结合了两种模式的优点，传参和复用</span><br><span class="line">特点：1、可以继承父类原型上的属性，可以传参，可复用。</span><br><span class="line">　　　2、每个新实例引入的构造函数属性是私有的。</span><br><span class="line">缺点：调用了两次父类构造函数（耗内存），子类的构造函数会代替原型上的那个父类构造函数。</span><br></pre></td></tr></table></figure><p>四、原型式继承</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//先封装一个函数容器，用来输出对象和承载继承的原型</span><br><span class="line"><span class="keyword">function</span> content(obj)&#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">F</span></span>()&#123;&#125;</span><br><span class="line">    F.prototype = obj; //继承了传入的参数</span><br><span class="line">    <span class="built_in">return</span> new F();  //返回函数对象</span><br><span class="line">&#125;</span><br><span class="line">var sup = new Person(); //拿到父类的实例</span><br><span class="line">var sup1 = content(sup);</span><br><span class="line">console.log(sup1.age); //10 继承了父类函数的属性</span><br><span class="line">重点：用一个函数包装一个对象，然后返回这个函数的调用，这个函数就变成了个可以随意增添属性的实例或对象。object.create()就是这个原理。</span><br><span class="line">　　　　特点：类似于复制一个对象，用函数来包装。</span><br><span class="line">　　　　缺点：1、所有实例都会继承原型上的属性。</span><br><span class="line">　　　　　　　2、无法实现复用。（新实例属性都是后面添加的）</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;JS继承的六种方式&quot;&gt;&lt;a href=&quot;#JS继承的六种方式&quot; class=&quot;headerlink&quot; title=&quot;JS继承的六种方式&quot;&gt;&lt;/a&gt;JS继承的六种方式&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
      
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/categories/js/"/>
    
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>箭头函数</title>
    <link href="http://yoursite.com/2020/08/26/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2020/08/26/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/</id>
    <published>2020-08-26T07:20:01.000Z</published>
    <updated>2020-08-26T07:40:34.951Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写法更简洁"><a href="#写法更简洁" class="headerlink" title="写法更简洁"></a>写法更简洁</h2><h2 id="没有局部this的绑定"><a href="#没有局部this的绑定" class="headerlink" title="没有局部this的绑定"></a>没有局部this的绑定</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">1.没有被函数包裹，那么它里面的this指向全局,windows上面的对象。</span><br><span class="line"><span class="built_in">let</span> a = <span class="string">"I am windows"</span>;</span><br><span class="line"><span class="built_in">let</span> obj = &#123;</span><br><span class="line">    a: <span class="string">'I am objs'</span>,</span><br><span class="line">    fun: () =&gt; &#123;</span><br><span class="line">        console.log(this.a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.fun();  //输出I am windows</span><br><span class="line">2.被函数包裹就是与同级定义</span><br><span class="line"><span class="built_in">let</span> a = <span class="string">"I am windows"</span>;</span><br><span class="line"><span class="built_in">let</span> obj = &#123;</span><br><span class="line">    a: <span class="string">'I am objs'</span>,</span><br><span class="line">    <span class="function"><span class="title">fun</span></span>()&#123;</span><br><span class="line">        (() =&gt; &#123;</span><br><span class="line">        console.log(this.a);</span><br><span class="line">        &#125;)()   //立即执行函数</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.fun();  //输出I am objs</span><br></pre></td></tr></table></figure><h2 id="箭头函数体内的this对象，就是定义该函数时所在作用域指向的对象，而不是使用时所在作用域指向的对象。"><a href="#箭头函数体内的this对象，就是定义该函数时所在作用域指向的对象，而不是使用时所在作用域指向的对象。" class="headerlink" title="箭头函数体内的this对象，就是定义该函数时所在作用域指向的对象，而不是使用时所在作用域指向的对象。"></a>箭头函数体内的this对象，就是定义该函数时所在作用域指向的对象，而不是使用时所在作用域指向的对象。</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">永远绑定A</span><br><span class="line"><span class="built_in">let</span> name = <span class="string">'window'</span>;</span><br><span class="line"><span class="built_in">let</span> A = &#123;</span><br><span class="line">    name : <span class="string">'A'</span>,</span><br><span class="line">    sayHello: <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">        <span class="built_in">let</span> s = () =&gt; console.log(this.name)</span><br><span class="line">        <span class="built_in">return</span> s //返回箭头函数s</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">let</span> sayHello = A.sayHello();</span><br><span class="line">sayHello(); // 输出A;</span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> B = &#123;</span><br><span class="line">    name : <span class="string">'B'</span>;</span><br><span class="line">&#125;</span><br><span class="line">sayHello.call(B);   //还是A</span><br><span class="line">sayHello.call();    //还是A</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写法更简洁&quot;&gt;&lt;a href=&quot;#写法更简洁&quot; class=&quot;headerlink&quot; title=&quot;写法更简洁&quot;&gt;&lt;/a&gt;写法更简洁&lt;/h2&gt;&lt;h2 id=&quot;没有局部this的绑定&quot;&gt;&lt;a href=&quot;#没有局部this的绑定&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>手写一个Ajax</title>
    <link href="http://yoursite.com/2020/08/21/%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AAAjax/"/>
    <id>http://yoursite.com/2020/08/21/%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AAAjax/</id>
    <published>2020-08-21T06:03:34.000Z</published>
    <updated>2020-08-31T06:21:33.218Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建ajax函数："><a href="#创建ajax函数：" class="headerlink" title="创建ajax函数："></a>创建ajax函数：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> ajax(&#123;url,<span class="built_in">type</span>,data,dataType&#125;) &#123;</span><br><span class="line">    <span class="built_in">return</span> new Promise(<span class="keyword">function</span>(resolve,reject)&#123;</span><br><span class="line">        //1. 创建异步请求对象</span><br><span class="line">        var xhr = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveObject(<span class="string">'Microsoft.XMLHttp'</span>);</span><br><span class="line">        //2.绑&amp;定监听事件</span><br><span class="line">        xhr.onreadystatechange = <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">            <span class="keyword">if</span>(xhr.readyState==4&amp;&amp;xhr.status==200) &#123;</span><br><span class="line">                //当返回接收的字符串类型为json串时，自动转换json串</span><br><span class="line">                <span class="keyword">if</span>(dataType!==undefined</span><br><span class="line">                    &amp;&amp;dataType.toLowerCase()===<span class="string">"json"</span>)</span><br><span class="line">var res=JSON.parse(xhr.responseText)</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">// 否则直接获取返回的响应文本中的内容</span><br><span class="line">var res=xhr.responseText</span><br><span class="line">                // 通过Promise，将返回的数据向后传递,相当于获取到请求数据将数据<span class="built_in">return</span>出来</span><br><span class="line">                resolve(res);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //如果请求方式为get请求，则将请求参数拼接在url后</span><br><span class="line">        <span class="keyword">if</span>(type.toLowerCase()===<span class="string">"get"</span>&amp;&amp;data!==undefined)&#123;</span><br><span class="line">url+=<span class="string">"?"</span>+data;</span><br><span class="line">    &#125;</span><br><span class="line">        //3.打开链接</span><br><span class="line">        xhr.open(<span class="built_in">type</span>,url,<span class="literal">true</span>);</span><br><span class="line">        //如果请求方式为post请求，则修改请求消息头</span><br><span class="line">        <span class="keyword">if</span>(type.toLowerCase()===<span class="string">"post"</span>)</span><br><span class="line">            //增加：设置请求消息头</span><br><span class="line">            xhr.setRequestHeader(<span class="string">"Content-Type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">            //4.发送请求</span><br><span class="line">            <span class="keyword">if</span>(type.toLowerCase()===<span class="string">"post"</span>&amp;&amp;data!==undefined)</span><br><span class="line">                xhr.send(data);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                xhr.send(null);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">##调用</span></span><br><span class="line">(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    ajax(&#123;</span><br><span class="line">        url: <span class="string">"url路径..."</span>,</span><br><span class="line">        <span class="built_in">type</span>: <span class="string">"get"</span>,</span><br><span class="line">        dataType: <span class="string">"json"</span>,</span><br><span class="line">    &#125;).<span class="keyword">then</span>(<span class="keyword">function</span>(res) &#123;...&#125;)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;创建ajax函数：&quot;&gt;&lt;a href=&quot;#创建ajax函数：&quot; class=&quot;headerlink&quot; title=&quot;创建ajax函数：&quot;&gt;&lt;/a&gt;创建ajax函数：&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
      
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/categories/js/"/>
    
    
      <category term="异步" scheme="http://yoursite.com/tags/%E5%BC%82%E6%AD%A5/"/>
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="ajax" scheme="http://yoursite.com/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>JS浅拷贝深拷贝</title>
    <link href="http://yoursite.com/2020/08/14/JS%E6%B5%85%E6%8B%B7%E8%B4%9D%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
    <id>http://yoursite.com/2020/08/14/JS%E6%B5%85%E6%8B%B7%E8%B4%9D%E6%B7%B1%E6%8B%B7%E8%B4%9D/</id>
    <published>2020-08-14T06:09:16.000Z</published>
    <updated>2020-08-26T07:00:02.014Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JavaScript数据类型"><a href="#JavaScript数据类型" class="headerlink" title="JavaScript数据类型"></a>JavaScript数据类型</h2><p>JavaScript中，有七种内置类型：6种原始类型和引用类型，它们分别是：<br>6种原始类型（基本类型）：<br>    #空值（null）<br>    #未定义（undefined）<br>    #布尔值（boolean）<br>    #数字（number）<br>    #字符串（string）<br>    #符号（symbol, ES6中新增）<br>引用类型：<br>    #对象（object）<br>可以通过typeof运算符来查看类型的值：[]和{}都是引用类型，注意typeof(null) //“object”</p><a id="more"></a><h2 id="总结JS中的参数传递"><a href="#总结JS中的参数传递" class="headerlink" title="总结JS中的参数传递"></a>总结JS中的参数传递</h2><p>JS中，参数传递只有一种传递规则：按值传递，基于值的复制。原始类型复制的是值本身，所以两份数据互不影响；引用类型复制的是引用值，所以形参和实参指向同一个对象，通过一个引用修改了对象，那么通过另一个引用访问的对象就是修改后的对象。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> obj1 = 3;   <span class="built_in">let</span> obj2 = [1,2,3,4,5]</span><br><span class="line"><span class="built_in">let</span> a1 = obj1;  <span class="built_in">let</span> a2 = obj2;</span><br><span class="line"><span class="built_in">let</span> b1 = obj1;  <span class="built_in">let</span> b2 = obj2;</span><br><span class="line">a1 = 4;         <span class="built_in">let</span> a2 = obj2.push(6);</span><br><span class="line">console.log(a1,b1);    console.log(a2,b2); </span><br><span class="line">//expected output: 4 3   </span><br><span class="line">//                 [1,2,3,4,5,6] [1,2,3,4,5,6]</span><br></pre></td></tr></table></figure><h2 id="JS对象的浅拷贝、深拷贝和Object-assign方法浅析"><a href="#JS对象的浅拷贝、深拷贝和Object-assign方法浅析" class="headerlink" title="JS对象的浅拷贝、深拷贝和Object.assign方法浅析"></a>JS对象的浅拷贝、深拷贝和Object.assign方法浅析</h2><p>对象的浅拷贝：<br>浅拷贝是对象共用一个内存地址，对象的变化互相影响。比如上述例子。<br>对象的深拷贝：<br>分配新的内存，两个对象改变互不影响。<br>注意：对于Object.assign({},srcObj)，如果对象的属性值为简单类型（string,number）,得到新对象为深拷贝；如果属性值为对象或其他引用类型则为浅拷贝。</p><p>深拷贝的实现：<br>有很多第三方库实现了对象的深拷贝，比如常见的Jquery和underscore。<br>JSON.parse()和JSON.stringif()<br>这是对深拷贝的无脑实现方法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">srcObj = &#123;<span class="string">'name'</span>: <span class="string">'明'</span>, grade: &#123;<span class="string">'chi'</span>: <span class="string">'50'</span>, <span class="string">'eng'</span>: <span class="string">'50'</span>&#125;&#125;;</span><br><span class="line">copyObj2 = JSON.parse(JSON.stringif(srcObj));</span><br><span class="line">copyObj2.name = <span class="string">'红'</span>;</span><br><span class="line">copyObj2.grade.chi = <span class="string">'60'</span>;</span><br><span class="line">console.log(<span class="string">'JSON srcObj'</span>, srcObj);</span><br><span class="line">// &#123;<span class="string">'name'</span>: <span class="string">'明'</span>, grade: &#123;<span class="string">'chi'</span>: <span class="string">'50'</span>, <span class="string">'eng'</span>: <span class="string">'50'</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>可以看到改变copyObj2并没有改变原始对象，实现了基本的深拷贝。<br>但是用JSON.parse()和JSON.stringif()会有一个问题，其能正确处理的对象只有Number,String,Array等能够被json表示的数据结构，因此函数这种不能被json表示的类型将不能被正确处理。比如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">srcObj = &#123;<span class="string">'name'</span>: <span class="string">'明'</span>, grade: &#123;<span class="string">'chi'</span>: <span class="string">'50'</span>, <span class="string">'eng'</span>: <span class="string">'50'</span>&#125;,</span><br><span class="line">    <span class="string">'hello'</span>: <span class="function"><span class="title">function</span></span>() &#123; console.log(<span class="string">'hello'</span>) &#125;&#125;;</span><br><span class="line">copyObj2 = JSON.parse(JSON.stringif(srcObj));</span><br><span class="line">copyObj2.name = <span class="string">'红'</span>;</span><br><span class="line">copyObj2.grade.chi = <span class="string">'60'</span>;</span><br><span class="line">console.log(<span class="string">'JSON srcObj'</span>, copyObj2);</span><br><span class="line">// &#123;<span class="string">'name'</span>: <span class="string">'红'</span>, grade: &#123;<span class="string">'chi'</span>: <span class="string">'60'</span>, <span class="string">'eng'</span>: <span class="string">'50'</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>数组的深拷贝和浅拷贝：<br>数组的深拷贝可以使用concat,slice,es6的Array.from</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> arr new Array(6)</span><br><span class="line">arr[0] = <span class="string">"George"</span></span><br><span class="line">arr[1] = <span class="string">"John"</span></span><br><span class="line">arr[2] = <span class="string">"Thomas"</span></span><br><span class="line">arr[3] = <span class="string">"James"</span></span><br><span class="line">arr[4] = <span class="string">"Adrew"</span></span><br><span class="line">arr[5] = <span class="string">"Martin"</span></span><br><span class="line">console.log(arr.slice(2,4))</span><br><span class="line">console.log(arr)</span><br><span class="line">// Thomas, James</span><br><span class="line">// George,John, Thomas, James, Adrew, Martin</span><br></pre></td></tr></table></figure><p>通用js对象的深拷贝（递归）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="built_in">clone</span>(Obj) &#123;</span><br><span class="line">    <span class="built_in">let</span> buf;</span><br><span class="line">    <span class="keyword">if</span> (Obj instanceof Array) &#123;</span><br><span class="line">        buf = [];    //创建一个空的数组</span><br><span class="line">        <span class="built_in">let</span> i = Obj.length;</span><br><span class="line">        <span class="keyword">while</span>(i--) &#123;</span><br><span class="line">            buf[i] = <span class="built_in">clone</span>(Obj[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> buf;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Obj instanceof Object) &#123;</span><br><span class="line">        buf = &#123;&#125;;    //创建一个空对象</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">let</span> k <span class="keyword">in</span> Obj) &#123;</span><br><span class="line">            buf[k] = <span class="built_in">clone</span>(Obj[k]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> buf;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">return</span> Obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JavaScript数据类型&quot;&gt;&lt;a href=&quot;#JavaScript数据类型&quot; class=&quot;headerlink&quot; title=&quot;JavaScript数据类型&quot;&gt;&lt;/a&gt;JavaScript数据类型&lt;/h2&gt;&lt;p&gt;JavaScript中，有七种内置类型：6种原始类型和引用类型，它们分别是：&lt;br&gt;6种原始类型（基本类型）：&lt;br&gt;    #空值（null）&lt;br&gt;    #未定义（undefined）&lt;br&gt;    #布尔值（boolean）&lt;br&gt;    #数字（number）&lt;br&gt;    #字符串（string）&lt;br&gt;    #符号（symbol, ES6中新增）&lt;br&gt;引用类型：&lt;br&gt;    #对象（object）&lt;br&gt;可以通过typeof运算符来查看类型的值：[]和{}都是引用类型，注意typeof(null) //“object”&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/categories/js/"/>
    
    
      <category term="传递" scheme="http://yoursite.com/tags/%E4%BC%A0%E9%80%92/"/>
    
  </entry>
  
  <entry>
    <title>实习项目（来吧，展示）</title>
    <link href="http://yoursite.com/2020/08/01/lianpuproject/"/>
    <id>http://yoursite.com/2020/08/01/lianpuproject/</id>
    <published>2020-08-01T08:12:23.000Z</published>
    <updated>2020-08-21T06:02:42.571Z</updated>
    
    <content type="html"><![CDATA[<h2 id="主页显示"><a href="#主页显示" class="headerlink" title="主页显示"></a>主页显示</h2><p>搜索功能：包括tab的切换、搜索项的关键字匹配<br><img src="/2020/08/01/lianpuproject/homepage.png" alt="homepage"></p><h2 id="后台管理面板"><a href="#后台管理面板" class="headerlink" title="后台管理面板"></a>后台管理面板</h2><p>展示总体数据概览<br><img src="/2020/08/01/lianpuproject/dashbord.png" alt="dashbord"></p><a id="more"></a><h2 id="下拉框的展示"><a href="#下拉框的展示" class="headerlink" title="下拉框的展示"></a>下拉框的展示</h2><p>通过组件嵌套以及组件传参来实现，icon图通过循环过程匹配class展示<br><img src="/2020/08/01/lianpuproject/dropdown.png" alt="dropdown"></p><h2 id="标签详情页"><a href="#标签详情页" class="headerlink" title="标签详情页"></a>标签详情页</h2><p>左侧会记录点击过的标签，关闭后会自动展示下一个；右侧通过echarts图表绘制，通过Element-ui时间选择器来选择时间<br><img src="/2020/08/01/lianpuproject/tagdetail.png" alt="tagdetail"></p><h2 id="标签信息管理页"><a href="#标签信息管理页" class="headerlink" title="标签信息管理页"></a>标签信息管理页</h2><p>主要应用Element-ui组件，作用：分页查询和点击设备类型跳转相应详情页面<br><img src="/2020/08/01/lianpuproject/tagcommand.png" alt="tagcommand"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;主页显示&quot;&gt;&lt;a href=&quot;#主页显示&quot; class=&quot;headerlink&quot; title=&quot;主页显示&quot;&gt;&lt;/a&gt;主页显示&lt;/h2&gt;&lt;p&gt;搜索功能：包括tab的切换、搜索项的关键字匹配&lt;br&gt;&lt;img src=&quot;/2020/08/01/lianpuproject/homepage.png&quot; alt=&quot;homepage&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;后台管理面板&quot;&gt;&lt;a href=&quot;#后台管理面板&quot; class=&quot;headerlink&quot; title=&quot;后台管理面板&quot;&gt;&lt;/a&gt;后台管理面板&lt;/h2&gt;&lt;p&gt;展示总体数据概览&lt;br&gt;&lt;img src=&quot;/2020/08/01/lianpuproject/dashbord.png&quot; alt=&quot;dashbord&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="项目" scheme="http://yoursite.com/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>JS中map,filter,some,every,forEach,for in,for of用法总结</title>
    <link href="http://yoursite.com/2020/07/30/JS%E5%BE%AA%E7%8E%AF%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2020/07/30/JS%E5%BE%AA%E7%8E%AF%E6%80%BB%E7%BB%93/</id>
    <published>2020-07-30T06:36:24.000Z</published>
    <updated>2020-08-21T06:21:15.598Z</updated>
    
    <content type="html"><![CDATA[<h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>有返回值，返回一个新的数组，每个元素为调用func的结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> list = [1,2,3,4,5];</span><br><span class="line"><span class="built_in">let</span> other = list.map((d,i) =&gt; &#123;</span><br><span class="line">    <span class="built_in">return</span> d * 2;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(other);</span><br><span class="line">//<span class="built_in">print</span>: [2,4,6,8,10]</span><br><span class="line">//d表示值，i为索引</span><br></pre></td></tr></table></figure><h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><p>有返回值，返回一个符合func条件的元素数组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const words = [<span class="string">'spray'</span>, <span class="string">'limit'</span>, <span class="string">'elite'</span>, <span class="string">'exuberant'</span>, <span class="string">'destruction'</span>, <span class="string">'present'</span>]</span><br><span class="line"></span><br><span class="line">const result = words.filter(word =&gt; word.length &gt; 6);</span><br><span class="line"></span><br><span class="line">console.log(result);</span><br><span class="line">//expected output: Array [<span class="string">"exuberant"</span>, <span class="string">"destruction"</span>, <span class="string">"parent"</span>]</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="some"><a href="#some" class="headerlink" title="some"></a>some</h2><p>返回一个Boolean，判断是否有元素符合func条件，如果有一个元素符合func条件，则循环停止。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> list = [1,2,3,4,5];</span><br><span class="line">list.some((d, i)=&gt; &#123;</span><br><span class="line">    console.log(d,i);</span><br><span class="line">    <span class="built_in">return</span> d&gt;3;</span><br><span class="line">&#125;);</span><br><span class="line">//<span class="built_in">print</span>: 1,0 2,1 3,2 4,3</span><br><span class="line">//<span class="built_in">return</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="every"><a href="#every" class="headerlink" title="every"></a>every</h2><p>返回一个boolean,判断每个元素是否符合func条件，有一个元素不满足func条件，则循环终止。返回false。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> list = [1,2,3,4,5];</span><br><span class="line">list.every((d, i)=&gt; &#123;</span><br><span class="line">    console.log(d,i);</span><br><span class="line">    <span class="built_in">return</span> d&lt;3;</span><br><span class="line">&#125;);</span><br><span class="line">//<span class="built_in">print</span>: 1,0 2,1 3,2</span><br><span class="line">//<span class="built_in">return</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h2><p>没有返回值，只针对每个元素调用func。<br>优点：代码简洁。<br>缺点：无法使用break,return等终止循环。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> list = [1,2,3,4,5];</span><br><span class="line"><span class="built_in">let</span> other = [];</span><br><span class="line">list.forEach((d, i)=&gt; &#123;</span><br><span class="line">    other.push(d*2);</span><br><span class="line">&#125;);</span><br><span class="line">console.log(other);</span><br><span class="line">//<span class="built_in">print</span>: [2,4,6,8,10]</span><br></pre></td></tr></table></figure><h2 id="for-in"><a href="#for-in" class="headerlink" title="for in"></a>for in</h2><p>for-in循环实际是为循环”enumerable”对象设计的，for in也可以循环数组，但是不推荐这样使用，for-in是用来循环带有字符串key的对象的方法。<br>缺点：只能获得对象的键名，不能直接获取键值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> obj = &#123;a:1,b:2,c:3&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">let</span> prop <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    console.log(<span class="string">"obj."</span> + prop + <span class="string">" = "</span> + obj[prop]);</span><br><span class="line">&#125;</span><br><span class="line">// <span class="built_in">print</span>: <span class="string">"obj.a = 1"</span> <span class="string">"obj.b = 2"</span> <span class="string">"obj.c = 3"</span></span><br></pre></td></tr></table></figure><h2 id="for-of"><a href="#for-of" class="headerlink" title="for of"></a>for of</h2><p>for of为ES6提供，具有iterator接口，在可迭代对象(Array,Map,Set,String,Dom集合)上创建一个迭代循环。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;map&quot;&gt;&lt;a href=&quot;#map&quot; class=&quot;headerlink&quot; title=&quot;map&quot;&gt;&lt;/a&gt;map&lt;/h2&gt;&lt;p&gt;有返回值，返回一个新的数组，每个元素为调用func的结果&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;let&lt;/span&gt; list = [1,2,3,4,5];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;let&lt;/span&gt; other = list.map((d,i) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; d * 2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(other);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;: [2,4,6,8,10]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//d表示值，i为索引&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;filter&quot;&gt;&lt;a href=&quot;#filter&quot; class=&quot;headerlink&quot; title=&quot;filter&quot;&gt;&lt;/a&gt;filter&lt;/h2&gt;&lt;p&gt;有返回值，返回一个符合func条件的元素数组&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;const words = [&lt;span class=&quot;string&quot;&gt;&#39;spray&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;limit&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;elite&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;exuberant&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;destruction&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;present&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;const result = words.filter(word =&amp;gt; word.length &amp;gt; 6);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(result);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//expected output: Array [&lt;span class=&quot;string&quot;&gt;&quot;exuberant&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;destruction&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;parent&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/categories/js/"/>
    
    
      <category term="对象" scheme="http://yoursite.com/tags/%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="循环" scheme="http://yoursite.com/tags/%E5%BE%AA%E7%8E%AF/"/>
    
  </entry>
  
  <entry>
    <title>JS-对象方法总结</title>
    <link href="http://yoursite.com/2020/07/30/JS-Object/"/>
    <id>http://yoursite.com/2020/07/30/JS-Object/</id>
    <published>2020-07-30T05:41:27.000Z</published>
    <updated>2020-08-21T06:20:58.849Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Object方法"><a href="#Object方法" class="headerlink" title="Object方法"></a>Object方法</h2><h3 id="Object-assign-target-source1-source2-…"><a href="#Object-assign-target-source1-source2-…" class="headerlink" title="Object.assign(target,source1,source2,…)"></a>Object.assign(target,source1,source2,…)</h3><p>该方法主要用于对象的合并，将源对象source的所有可枚举属性合并到目标对象target上，此方法只拷贝源对象的自身属性，不拷贝继承的属性。<br>Objects.assign方法实行的是浅拷贝，而不是深拷贝。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">const target = &#123;</span><br><span class="line">    x: 0,</span><br><span class="line">    y: 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const <span class="built_in">source</span> = &#123;</span><br><span class="line">    x: 1,</span><br><span class="line">    z: 2,</span><br><span class="line">    fn: &#123;</span><br><span class="line">        number : 1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Object.assign(target,<span class="built_in">source</span>);</span><br><span class="line">// target &#123;x: 1, y: 1, z: 2, fn : &#123;number : 1&#125;&#125;  //同名属性会被覆盖</span><br><span class="line">// <span class="built_in">source</span> &#123;x :1, z: 2, fn : &#123;number : 1&#125;&#125;</span><br><span class="line">target.fn.number = 2; //拷贝为对象引用</span><br><span class="line">// <span class="built_in">source</span> &#123;x: 1,z: 2,fn : &#123;number :2&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">Person</span></span>()&#123;</span><br><span class="line">    this.name = 1</span><br><span class="line">&#125;;</span><br><span class="line">Person.prototype.country = <span class="string">'china'</span>;</span><br><span class="line"><span class="built_in">let</span> student = new Person();</span><br><span class="line">student.age = 29;</span><br><span class="line">const young = &#123;intrest : <span class="string">'sport'</span>&#125;;</span><br><span class="line">Object.assign(young,student);</span><br><span class="line">//young &#123;intrest : <span class="string">'sport'</span> , name: 1, age: 29&#125;</span><br><span class="line">//只能拷贝自身的属性，不能拷贝prototype</span><br><span class="line"></span><br><span class="line">Object.assign([1,2,3],[4,5]) //把数组当作对象来处理</span><br><span class="line">// [4, 5, 3]</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Object-create-prototype-propertieObject"><a href="#Object-create-prototype-propertieObject" class="headerlink" title="Object.create(prototype, [propertieObject])"></a>Object.create(prototype, [propertieObject])</h3><p>使用指定的原型对象及其属性去创建一个新的对象</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const person = &#123;</span><br><span class="line">  isHuman: <span class="literal">false</span>,</span><br><span class="line">  printIntroduction: <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    console.log(`My name is <span class="variable">$&#123;this.name&#125;</span>. Am I human? <span class="variable">$&#123;this.isHuman&#125;</span>`);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const me = Object.create(person);</span><br><span class="line"></span><br><span class="line">me.name = <span class="string">'Matthew'</span>; // <span class="string">"name"</span> is a property <span class="built_in">set</span> on <span class="string">"me"</span>, but not on <span class="string">"person"</span></span><br><span class="line">me.isHuman = <span class="literal">true</span>; // inherited properties can be overwritten</span><br><span class="line"></span><br><span class="line">me.printIntroduction();</span><br><span class="line">// expected output: <span class="string">"My name is Matthew. Am I human? true"</span></span><br></pre></td></tr></table></figure><h3 id="Object-entries"><a href="#Object-entries" class="headerlink" title="Object.entries()"></a>Object.entries()</h3><p>方法返回一个huanhui给定对象自身可枚举属性的键值对数组，其排列与使用for…in循环遍历该对象返回的顺序一致（区别在于for-in循环还会枚举原型链中的属性）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">const object1 = &#123;</span><br><span class="line">  a: <span class="string">'somestring'</span>,</span><br><span class="line">  b: 42</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (const [key, value] of Object.entries(object1)) &#123;</span><br><span class="line">  console.log(`<span class="variable">$&#123;key&#125;</span>: <span class="variable">$&#123;value&#125;</span>`);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// expected output:</span><br><span class="line">// <span class="string">"a: somestring"</span></span><br><span class="line">// <span class="string">"b: 42"</span></span><br><span class="line">// order is not guaranteed</span><br><span class="line"></span><br><span class="line">const obj = &#123; foo: <span class="string">'bar'</span>, baz: 42 &#125;;</span><br><span class="line">console.log(Object.entries(obj)); // [ [<span class="string">'foo'</span>, <span class="string">'bar'</span>], [<span class="string">'baz'</span>, 42] ]</span><br><span class="line">//返回一个数组，其元素是与直接在object上找到的可枚举属性键值对相对应的数组。</span><br><span class="line"></span><br><span class="line">var obj = &#123; foo: <span class="string">"bar"</span>, baz: 42 &#125;; </span><br><span class="line">var map = new Map(Object.entries(obj));</span><br><span class="line">console.log(map); // Map &#123; foo: <span class="string">"bar"</span>, baz: 42 &#125;</span><br><span class="line">//借助Object.entries方法你可以很容易的将Object转换为Map:</span><br></pre></td></tr></table></figure><h3 id="Object-keys-obj-和Object-values-obj"><a href="#Object-keys-obj-和Object-values-obj" class="headerlink" title="Object.keys(obj)和Object.values(obj)"></a>Object.keys(obj)和Object.values(obj)</h3><p>Object.keys 返回一个所有元素为字符串的数组，其元素来自于从给定的object上面可直接枚举的属性。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// simple array</span><br><span class="line">var arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line">console.log(Object.keys(arr)); // console: [<span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>]</span><br></pre></td></tr></table></figure><p>Object.values(obj) 返回一个给定对象自身的所有可枚举属性值的数组，值的顺序与使用for…in循环的顺序相同 ( 区别在于 for-in 循环枚举原型链中的属性 )。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123; foo: <span class="string">'bar'</span>, baz: 42 &#125;;</span><br><span class="line">console.log(Object.values(obj)); // [<span class="string">'bar'</span>, 42]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Object方法&quot;&gt;&lt;a href=&quot;#Object方法&quot; class=&quot;headerlink&quot; title=&quot;Object方法&quot;&gt;&lt;/a&gt;Object方法&lt;/h2&gt;&lt;h3 id=&quot;Object-assign-target-source1-source2-…&quot;&gt;&lt;a href=&quot;#Object-assign-target-source1-source2-…&quot; class=&quot;headerlink&quot; title=&quot;Object.assign(target,source1,source2,…)&quot;&gt;&lt;/a&gt;Object.assign(target,source1,source2,…)&lt;/h3&gt;&lt;p&gt;该方法主要用于对象的合并，将源对象source的所有可枚举属性合并到目标对象target上，此方法只拷贝源对象的自身属性，不拷贝继承的属性。&lt;br&gt;Objects.assign方法实行的是浅拷贝，而不是深拷贝。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;const target = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    x: 0,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    y: 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;const &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt; = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    x: 1,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    z: 2,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fn: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        number : 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Object.assign(target,&lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// target &amp;#123;x: 1, y: 1, z: 2, fn : &amp;#123;number : 1&amp;#125;&amp;#125;  //同名属性会被覆盖&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt; &amp;#123;x :1, z: 2, fn : &amp;#123;number : 1&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;target.fn.number = 2; //拷贝为对象引用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt; &amp;#123;x: 1,z: 2,fn : &amp;#123;number :2&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;&lt;/span&gt;()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.name = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Person.prototype.country = &lt;span class=&quot;string&quot;&gt;&#39;china&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;let&lt;/span&gt; student = new Person();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;student.age = 29;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;const young = &amp;#123;intrest : &lt;span class=&quot;string&quot;&gt;&#39;sport&#39;&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Object.assign(young,student);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//young &amp;#123;intrest : &lt;span class=&quot;string&quot;&gt;&#39;sport&#39;&lt;/span&gt; , name: 1, age: 29&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//只能拷贝自身的属性，不能拷贝prototype&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Object.assign([1,2,3],[4,5]) //把数组当作对象来处理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// [4, 5, 3]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/categories/js/"/>
    
    
      <category term="对象" scheme="http://yoursite.com/tags/%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="拷贝" scheme="http://yoursite.com/tags/%E6%8B%B7%E8%B4%9D/"/>
    
  </entry>
  
  <entry>
    <title>async和await的理解</title>
    <link href="http://yoursite.com/2020/07/24/async%EF%BC%8Cawait/"/>
    <id>http://yoursite.com/2020/07/24/async%EF%BC%8Cawait/</id>
    <published>2020-07-24T11:26:12.000Z</published>
    <updated>2020-08-21T06:20:34.080Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Es6中promise和async，await的用法"><a href="#Es6中promise和async，await的用法" class="headerlink" title="Es6中promise和async，await的用法"></a>Es6中promise和async，await的用法</h3><p>async返回一个promise对象，await只能在async中使用，当await等到的是一个promise对象时，它会阻塞后面的代码，等着Promise对象resolve，然后得到resolve的值，作为await表达式的运算结果。阻塞只在async函数中，被封装到Promise对象中异步执行。</p><h3 id="宏任务，微任务和事件循环"><a href="#宏任务，微任务和事件循环" class="headerlink" title="宏任务，微任务和事件循环"></a>宏任务，微任务和事件循环</h3><p>宏任务和微任务通过例题来加深理解，微任务如Promise，宏任务包括整体代码script，setTimeout,setInterval。<br> <a href="https://zhuanlan.zhihu.com/p/97138729" target="_blank" rel="noopener">例题</a><br>我对于事件循环的理解：<br>Event Loop是一个程序结构，用于等待和发送消息和事件。当主线程空闲时，让Event Loop线程通知相应的I/O程序，接着运行。<br>1.执行中遇到函数调用会压入执行栈。主线程在遇到Ajax或setTimeout这种异步操作时会交给浏览器的WebAPIs,然后继续执行后边的代码，知道最后执行栈为空。<br>2.浏览器会在不确定的时间将完成的任务返回，排到相应的任务队列后。<br>3.执行栈为空后，主线程会到任务队列中去取任务，这些任务告诉下一步执行哪些回调函数。任务队列具有优先级，按照优先级决定访问的先后顺序。而优先级在不同的环境中会有所不同。<br>4.每访问一个队列，执行栈会执行完这个任务队列的所有的代码，然后再取下一个任务队列需要执行的代码。<br>就这样循环执行，直到全为空，称为事件循环。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Es6中promise和async，await的用法&quot;&gt;&lt;a href=&quot;#Es6中promise和async，await的用法&quot; class=&quot;headerlink&quot; title=&quot;Es6中promise和async，await的用法&quot;&gt;&lt;/a&gt;Es6中prom
      
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/categories/js/"/>
    
    
      <category term="异步" scheme="http://yoursite.com/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/07/24/hello-world/"/>
    <id>http://yoursite.com/2020/07/24/hello-world/</id>
    <published>2020-07-24T11:18:17.985Z</published>
    <updated>2020-07-24T11:18:17.986Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
